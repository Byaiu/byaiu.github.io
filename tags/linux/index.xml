<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Sytrumics</title>
    <link>http://www.example.com/tags/linux/</link>
    <description>Recent content in Linux on Sytrumics</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Oct 2017 11:09:40 +0800</lastBuildDate>
    
	<atom:link href="http://www.example.com/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dtrace in linux</title>
      <link>http://www.example.com/blog/dtrace/</link>
      <pubDate>Sun, 29 Oct 2017 11:09:40 +0800</pubDate>
      
      <guid>http://www.example.com/blog/dtrace/</guid>
      <description>dtrace的由来 听过一些八卦，意思是Sun的Solaris有很多杀手级的特点，比如说ZFS，还有一个就是DTrace，这些特点都让Linux的玩家们羡慕不已。DTrace可以在运行时注入一段自定义代码来完成某些信息的搜集和处理，这段代码是可以被验证的，可以保证不会损害系统的安全性。
Linux上实现内核代码注入的方式应该也有不少，我听过并且理解的有kprobe。不过近几年来Linux Kernel里的BPF(Berkeley Packet Filter)也提供了这样的能力。BPF提供了一个比较简便的虚拟机，用于执行一段特殊的代码，通过代码的执行，就可以判定这个数据包是否可以被接受。
相关资料 其实最重要的资料就是Kernel自带的Documentation了：networking/filter.txt，在其中阐述了BPF的由来，指令的设计、验证，以及map的使用方式等。</description>
    </item>
    
  </channel>
</rss>